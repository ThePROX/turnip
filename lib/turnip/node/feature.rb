require 'turnip/node/base'
require 'turnip/node/tag'
require 'turnip/node/scenario_group_definition'
require 'turnip/node/rule'

module Turnip
  module Node
    #
    # @note Feature metadata generated by Gherkin
    #
    #     {
    #       type: :Feature,
    #       tags: [], # Array of Tag
    #       location: { line: 10, column: 3 },
    #       language: 'en',
    #       keyword: 'Feature',
    #       name: 'Feature name',
    #       description: 'Feature description',
    #       children: [], # Array of Background, Scenario and Scenario Outline
    #     }
    #
    class Feature < ScenarioGroupDefinition
      include HasTags

      def language
        @raw[:language]
      end

      def children
        @children ||= @raw[:children].map do |child|
          #
          # @TODO
          #
          #   rule = unless child[:rule].nil?
          #            Rule.new(child[:rule])
          #          end
          #
          background = unless child[:background].nil?
                         Background.new(child[:background])
                       end

          scenario = unless child[:scenario].nil?
                       if child[:scenario][:examples].empty?
                         Scenario.new(child[:scenario])
                       else
                         ScenarioOutline.new(child[:scenario])
                       end
                     end

          [background, scenario]
        end.flatten.compact
      end

      def metadata_hash
        super.merge(:type => Turnip.type, :turnip => true)
      end
    end
  end
end
